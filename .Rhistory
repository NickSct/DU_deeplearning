import tensorflow as tf
reticulate::py_available()
reticulate::repl_python()
import tensorflow as tf
import numpy as np
reticulate::repl_python()
import tensorflow as tf
import numpy as np
tf.keras.Input
help(tf.keras.Input)
x = np.arange(20).reshape(2, 2, 5)
y = np.arange(20, 30).reshape(2, 1, 5)
x
x.shape
y.shape
z = keras.layers.Concatenate(axis=1)([x, y])
z = tf.keras.layers.Concatenate(axis=1)([x, y])
z.shape
z
x
y
x
y
z
x.shape
N = 50
x = tf.random.uniform(shape(N,1))
tf.random.uniform
help(tf.random.uniform)
x = tf.random.uniform(shape = (N,))
x
x.shape
tf.shape(x)
y = x + tf.random.normal(shape(N,))
y = x + tf.random.normal(shape = (N,))
y
tf.keras.metrics.mae
help(tf.keras.metrics.mae)
x = tf.random.uniform(shape = (N,), seed = 42)
y = x + tf.random.normal(shape = (N,), seed = 42)
inputs = tf.keras.Input(shape= (N,1))
hidden1 = tf.keras.layers.Dense(1, activation = "relu")
outputs = tf.keras.layers.Dense(1)
model =tf.keras.Model(inputs, outputs)
inputs = tf.keras.Input(shape= (N,1))
hidden1 = tf.keras.layers.Dense(1, activation = "relu")(inputs)
outputs = tf.keras.layers.Dense(1)(hidden1)
model =tf.keras.Model(inputs, outputs)
model.summary()
tf.keras.Model.compile(loss = tf.keras.losses.mae, optimiser = tf.keras.optimizers.SGD(), metrics = tf.keras.metrics.mae())
tf.keras.Model.compile(loss = tf.keras.losses.mae, optimiser = tf.keras.optimizers.SGD(),
metrics = ["mae"])
tf.keras.Model.compile(loss = tf.keras.losses.mae,
optimizer = tf.keras.optimizers.SGD(),
metrics = ["mae"])
model.compile(loss = tf.keras.losses.mae,
optimizer = tf.keras.optimizers.SGD(),
metrics = ["mae"])
model.fit(x,y,epochs = 10)
tf.expand_dims(x, axis = -1)
tf.expand_dims(x, axis = 1)
model.fit(tf.expand_dims(x, axis = 1),y,epochs = 10)
model
model.summary()
model.fit(tf.expand_dims(x, axis = -1),y,epochs = 10)
y
x[0]
x[0].shape
model.fit(tf.expand_dims(x, axis = -1),y,epochs = 10)
(tf.expand_dims(x, axis = -1)
)
model.fit(tf.expand_dims(x, axis = -1),y,epochs = 10)
inputs = tf.keras.Input(shape= (N,1), name = "input")
hidden1 = tf.keras.layers.Dense(1, activation = "relu")(inputs)
outputs = tf.keras.layers.Dense(1, name = "output")(hidden1)
model =tf.keras.Model(inputs, outputs)
model.summary()
model.compile(loss = tf.keras.losses.mae,
optimizer = tf.keras.optimizers.SGD(),
metrics = ["mae"])
model.fit(tf.expand_dims(x, axis = -1),y,epochs = 10)
history_0 = model.fit(tf.expand_dims(x, axis = -1),y,epochs = 10)
import matplotlib as plt
import matplotlib.pyplot as plt
plt.scatter(x,y)
plt.show()
tf.random.normal
help(tf.random.normal)
x
tf.random.normal(shape = (N,), seed = 42, )
x
tf.random.uniform
help(tf.random.uniform)
x = tf.random.uniform(shape = (N,), minval = 0, maxval = 20,seed = 42)
y = x + tf.random.normal(shape = (N,), seed = 42, )
inputs = tf.keras.Input(shape= (N,1), name = "input")
hidden1 = tf.keras.layers.Dense(1, activation = "relu")(inputs)
outputs = tf.keras.layers.Dense(1, name = "output")(hidden1)
model =tf.keras.Model(inputs, outputs)
model.summary()
model.compile(loss = tf.keras.losses.mae,
optimizer = tf.keras.optimizers.SGD(),
metrics = ["mae"])
history_0 = model.fit(tf.expand_dims(x, axis = -1),y,epochs = 10)
plt.scatter(x,y)
plt.show()
plt.close()
plt.scatter(x,y)
plt.show()
plt.close()
history_0.history
N = 50
x = tf.random.uniform(shape = (N,), minval = 0, maxval = 20,seed = 42)
y = x + tf.random.normal(shape = (N,), seed = 42, )/2
inputs = tf.keras.Input(shape= (N,1), name = "input")
hidden1 = tf.keras.layers.Dense(1, activation = "relu")(inputs)
outputs = tf.keras.layers.Dense(1, name = "output")(hidden1)
model =tf.keras.Model(inputs, outputs)
model.summary()
model.compile(loss = tf.keras.losses.mae,
optimizer = tf.keras.optimizers.SGD(),
metrics = ["mae"])
history_0 = model.fit(tf.expand_dims(x, axis = -1),y,epochs = 10)
plt.scatter(x,y)
plt.show()
plt.close()
import pandas as pd
res_pd = pd.DataFrame(history_0.history)
res_pd
model.compile(loss = tf.keras.losses.mae,
optimizer = tf.keras.optimizers.SGD(),
metrics = tf.keras.metrics.RootMeanSquaredError)
model.compile(loss = tf.keras.losses.mae,
optimizer = tf.keras.optimizers.SGD(),
metrics = ["RootMeanSquaredError"])
history_0 = model.fit(tf.expand_dims(x, axis = -1),y,epochs = 10)
plt.scatter(x,y)
plt.show()
plt.close()
res_pd = pd.DataFrame(history_0.history)
res_pd
res_pd.plot()
plt.show()
res_pd[:0]
res_pd[::0]
res_pd[,:0]
res_pd[,0]
res_pd[0]
res_pd[1]
res_pd
res_pd.iloc([:,1])
res_pd.iloc([,1])
res_pd.iloc([1])
res_pd.iloc([:,1])
res_pd.iloc([,:1])
res_pd.iloc([1])
res_pd.iloc([:,[1])
res_pd.iloc([:,[1]])
res_pd.iloc[:, [1, 0]]
res_pd
res_pd.iloc[:, [0]]
res_pd.iloc[:, 0]
history_0 = model.fit(tf.expand_dims(x, axis = -1),y,epochs = 100)
res_pd = pd.DataFrame(history_0.history)
res_pd.iloc([:,[1]])
plt.show()
res_pd = pd.DataFrame(history_0.history)
plt.show()
res_pd.iloc[:, 0]
res_pd
res_pd = pd.DataFrame(history_0.history)
plt.show()
res_pd.plot()
plt.show()
tf.keras.layers.BatchNormalization
help(tf.keras.layers.BatchNormalization)
reticulate::repl_python()
from keras import mnist
import tensorflow as tf
from keras import mnist
from keras.datasets import mnist
(train_x, train_y), (test_x, test_y) = mnist.load_data("data")
train_x
train_x.shape
test_x
test_x.shape
